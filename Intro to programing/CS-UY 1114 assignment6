
# Author: <Yuezhu Zhao>
# Assignment #6 - Battleship
# Date due: 2021-05-06
# I pledge that I have completed this assignment without
# collaborating with anyone else, in conformance with the
# NYU School of Engineering Policies and Procedures on
# Academic Misconduct.

import random

### DO NOT EDIT BELOW (with the exception of MAX_MISSES) ###

HIT_CHAR = 'x'
MISS_CHAR = 'o'
BLANK_CHAR = '.'
HORIZONTAL = 'h'
VERTICAL = 'v'
MAX_MISSES = 20
SHIP_SIZES = {
    "carrier": 5,
    "battleship": 4,
    "cruiser": 3,
    "submarine": 3,
    "destroyer": 2
}
NUM_ROWS = 10
NUM_COLS = 10
ROW_IDX = 0
COL_IDX = 1
MIN_ROW_LABEL = 'A'
MAX_ROW_LABEL = 'J'


def get_random_position():
    """Generates a random location on a board of NUM_ROWS x NUM_COLS."""

    row_choice = chr(
                    random.choice(
                        range(
                            ord(MIN_ROW_LABEL),
                            ord(MIN_ROW_LABEL) + NUM_ROWS
                        )
                    )
    )

    col_choice = random.randint(0, NUM_COLS - 1)

    return (row_choice, col_choice)


def play_battleship():
    """Controls flow of Battleship games including display of
    welcome and goodbye messages.

    :return: None
    """

    print("Let's Play Battleship!\n")

    game_over = False

    while not game_over:

        game = Game()
        game.display_board()

        while not game.is_complete():
            pos = game.get_guess()
            result = game.check_guess(pos)
            game.update_game(result, pos)
            game.display_board()

        game_over = end_program()

    print("Goodbye.")

### DO NOT EDIT ABOVE (with the exception of MAX_MISSES) ###


class Ship:

    def __init__(self, name, start_position, orientation):
        """Creates a new ship with the given name, placed at start_position in the
        provided orientation. The number of positions occupied by the ship is determined
        by looking up the name in the SHIP_SIZE dictionary.
        :param name: the name of the ship
        :param start_position: tuple representing the starting position of ship on the board
        :param orientation: the orientation of the ship ('v' - vertical, 'h' - horizontal)
        :return: None
        """
        self.sunk = False
        self.name = name
        self.positions = {}
        position = start_position
        if orientation.lower() == HORIZONTAL:
            while position[COL_IDX] < NUM_COLS and len(self.positions.keys()) < SHIP_SIZES[name]:
                self.positions[position] = False
                position = (position[ROW_IDX], position[COL_IDX] + 1)
        elif orientation.lower() == VERTICAL:
            while ord(position[ROW_IDX]) <= ord(MAX_ROW_LABEL) and len(self.positions.keys()) < SHIP_SIZES[name]:
                self.positions[position] = False
                position = (chr(ord(position[ROW_IDX]) + 1), position[COL_IDX])




class Game:

    ########## DO NOT EDIT #########

    _ship_types = ["carrier", "battleship", "cruiser", "submarine", "destroyer"]


    def display_board(self):
        """ Displays the current state of the board."""

        print()
        print("  " + ' '.join('{}'.format(i) for i in range(len(self.board))))
        for row_label in self.board.keys():
            print('{} '.format(row_label) + ' '.join(self.board[row_label]))
        print()

    def __init__(self, max_misses=MAX_MISSES):
        """ Creates a new game with max_misses possible missed guesses.
        The board is initialized in this function and ships are randomly
        placed on the board.
        :param max_misses: maximum number of misses allowed before game ends
        """
        self.guesses = []
        self.max_misses = max_misses
        self.ships = []
        self.create_and_place_ships()
        self.initialize_board()


    def initialize_board(self):
        """Sets the board to it's initial state with each position occupied by
        a period ('.') string.

        :return: None
        """
        self.board={ "A": ["."]*10, "B": ["."]*10,
                     "C": ["."]*10, "D": ["."]*10,
                     "E": ["."]*10, "F": ["."]*10,
                     "G": ["."]*10, "H": ["."]*10,
                     "I": ["."]*10, "J": ["."]*10,
                    }

    def in_bounds(self, start_position, ship_size, orientation):
        """Checks that a ship requiring ship_size positions can be placed at start position.

        :param start_position: tuple representing the starting position of ship on the board
        :param ship_size: number of positions needed to place ship
        :param orientation: the orientation of the ship ('v' - vertical, 'h' - horizontal)
        :return status: True if ship placement inside board boundary, False otherwise
        """

        start_position = start_position
        if orientation.lower() == VERTICAL and ord(start_position[ROW_IDX]) + ship_size <= ord(MAX_ROW_LABEL)+1:
            return True
        elif orientation.lower() == HORIZONTAL and start_position[COL_IDX] + ship_size - 1 < NUM_COLS:
            return True
        return False

    def overlaps_ship(self, start_position, ship_size, orientation):
        """Checks for overlap between previously placed ships and a potential new ship
        placement requiring ship_size positions beginning at start_position in the
        given orientation.
        :param start_position: tuple representing the starting position of ship on the board
        :param ship_size: number of positions needed to place ship
        :param orientation: the orientation of the ship ('v' - vertical, 'h' - horizontal)
        :return status: True if ship placement overlaps previously placed ship, False otherwise
        """
        count = 0
        start_posit = start_position
        positions = []
        for ship in self.ships:
            positions += ship.positions.keys()
        if orientation.lower() == HORIZONTAL:
            while start_posit[COL_IDX] < NUM_COLS and count < ship_size and start_posit not in positions:
                start_posit = (start_posit[ROW_IDX], start_posit[COL_IDX] + 1)
                count += 1
        elif orientation.lower() == VERTICAL:
            while ord(start_posit[ROW_IDX]) <= ord(MAX_ROW_LABEL) and count < ship_size and start_posit not in positions:
                start_posit = (chr(ord(start_posit[ROW_IDX]) + 1), start_posit[COL_IDX])
                count += 1
        if count != ship_size:
            return True
        else:
            return False

    def place_ship(self, start_position, ship_size):
        """Determines if placement is possible for ship requiring ship_size positions placed at
        start_position. Returns the orientation where placement is possible or None if no placement
        in either orientation is possible.

        :param start_position: tuple representing the starting position of ship on the board
        :param ship_size: number of positions needed to place ship
        :return orientation: 'h' if horizontal placement possible, 'v' if vertical placement possible,
        None if no placement possible
        """
        if self.in_bounds(start_position, ship_size, HORIZONTAL) and self.overlaps_ship(start_position, ship_size, HORIZONTAL) is False:
            return HORIZONTAL
        elif self.in_bounds(start_position, ship_size, VERTICAL) and self.overlaps_ship(start_position, ship_size, VERTICAL) is False:
            return VERTICAL
        # else:
        #     return None

    def create_and_place_ships(self):
        """Instantiates ship objects with valid board placements.

        :return: None
        """
        for name in Game._ship_types:
            while True:
                position = get_random_position()
                orientation = self.place_ship(position, SHIP_SIZES[name])
                if orientation is not None:
                    ship = Ship(name, position, orientation)
                    self.ships.append(ship)
                    break


    def get_guess(self):
        """Prompts the user for a row and column to attack. The
        return value is a board position in (row, column) format
        :return position: a board position as a (row, column) tuple
        """
        while True:
            row = input("Enter a row: ")
            if row.isalpha() and len(row) == 1 and ord(MIN_ROW_LABEL) <= ord(row) <= ord(MAX_ROW_LABEL):
                break
        while True:
            column = input("Enter a column: ")
            if column.isdigit() and 0 <= int(column) < NUM_COLS:
                column = int(column)
                break
        return (row, column)
        # while column.isdigit() is False and int(column) <= 0 or int(column) >= NUM_COLS:
        #     column = input("Enter a column: ")
        # column = int(column)
        # return (row, column)

    def check_guess(self, position):
        """Checks whether or not position is occupied by a ship. A hit is
        registered when position occupied by a ship and position not hit
        previously. A miss occurs otherwise.
        :param position: a (row,column) tuple guessed by user
        :return: guess_status: True when guess results in hit, False when guess results in miss
        """
        all_position = []
        for ship in self.ships:
            all_position += ship.positions.keys()
        if position not in all_position:
            return False
        for ship in self.ships:
            for posit, states in ship.positions.items():
                if posit == position:
                    if states:
                        return False
                    ship.positions[posit] = True
                    hits = ship.positions.values()
                    if sum(hits) == len(hits):
                        ship.sunk = True
                        print("You sunk the {}!". format(ship.name))
                    return True

    def update_game(self, guess_status, position):
        """Updates the game by modifying the board with a hit or miss
        symbol based on guess_status of position.
        :param guess_status: True when position is a hit, False otherwise
        :param position: a (row,column) tuple guessed by user
        :return: None
        """
        if guess_status is False:
INSTRUCTOR
| 05/10 AT 1:02 AM
This case fails to address what if the given position already has a hit from a previous round. 

            self.board[position[ROW_IDX]][position[COL_IDX]] = MISS_CHAR
INSTRUCTOR
| 05/10 AT 1:03 AM
Should check that it has not been hit before setting the new value to MISS_CHAR.

            self.guesses.append(position)
        else:
            self.board[position[ROW_IDX]][position[COL_IDX]] = HIT_CHAR
            # self.guesses.append(position)

    def is_complete(self):
        """Checks to see if a Battleship game has ended. Returns True when the game is complete
        with a message indicating whether the game ended due to successfully sinking all ships
        or reaching the maximum number of guesses. Returns False when the game is not
        complete.

        :return: True on game completion, False otherwise
        """
        sunk_ship=[]
        for ship in self.ships:
            sunk_ship.append(ship.sunk)
        if len(self.guesses) == self.max_misses:
            print("SORRY! NO GUESSES LEFT.")
            return True
        elif sum(sunk_ship) == len(sunk_ship):
            print("YOU WIN!")
            return True
        return False

    ########## DO NOT EDIT #########


def end_program():
    """Prompts the user with "Play again (Y/N)?" The question is repeated
    until the user enters a valid response (Y/y/N/n). The function returns
    False if the user enters 'Y' or 'y' and returns True if the user enters
    'N' or 'n'.

    :return response: boolean indicating whether to end the program
    """
    choice = input("Play again (Y/N)? ")
    while choice != "y" and choice != "Y" and choice != "n" and choice != "N":
        choice = input("Play again (Y/N)? ")
    if choice.lower() == "y":
        return False
    if choice.lower() == "n":
        return True

def main():
    """Executes one or more games of Battleship."""

    play_battleship()


if __name__ == "__main__":
    main()
